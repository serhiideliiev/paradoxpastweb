name: Deploy Pelican Site to GitHub Pages

# Trigger the workflow on pushes to the main branch
on:
  push:
    branches:
      - main
  # Allow manual triggering of the workflow
  workflow_dispatch:

# Set permissions for GitHub token to enable Pages deployment
permissions:
  contents: read
  pages: write
  id-token: write

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued
concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  # Job to build the Pelican site
  build:
    name: Build Pelican Site
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          # Fetch all history for proper git info in Pelican
          fetch-depth: 0

      - name: Set up Python environment
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Cache Python dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt', '**/pyproject.toml', '**/setup.py') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install Pelican and dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pelican[markdown]
          # Install additional dependencies if requirements.txt exists
          if [ -f requirements.txt ]; then
            pip install -r requirements.txt
          fi

      - name: Generate Pelican site
        run: |
          # Generate the site using Pelican
          pelican content -s pelicanconf.py
          
          # Verify that the output directory was created
          if [ ! -d "output" ]; then
            echo "Error: Output directory was not created"
            exit 1
          fi
          
          # Display some info about the generated site
          echo "Generated site contents:"
          ls -la output/

      - name: Upload site artifacts
        uses: actions/upload-pages-artifact@v3
        with:
          path: ./output

  # Job to deploy the built site to GitHub Pages
  deploy:
    name: Deploy to GitHub Pages
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build
    
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

  # Alternative deployment job using peaceiris/actions-gh-pages
  deploy-alternative:
    name: Deploy with peaceiris/actions-gh-pages
    runs-on: ubuntu-latest
    needs: build
    # Only run this job if you prefer this deployment method
    if: false  # Set to true to use this deployment method instead
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python environment
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Cache Python dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt', '**/pyproject.toml', '**/setup.py') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install Pelican and dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pelican[markdown]
          if [ -f requirements.txt ]; then
            pip install -r requirements.txt
          fi

      - name: Generate Pelican site
        run: |
          pelican content -s pelicanconf.py
          if [ ! -d "output" ]; then
            echo "Error: Output directory was not created"
            exit 1
          fi

      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./output
          # Optional: Add a custom commit message
          commit_message: "Deploy Pelican site: ${{ github.event.head_commit.message }}"
          # Optional: Enable Jekyll processing (set to false for static sites)
          enable_jekyll: false
          # Optional: Add CNAME file for custom domain
          # cname: your-domain.com
